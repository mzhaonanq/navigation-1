{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","push","toUpperCase","logoType","onbeforeunload","string","stringify","setItem","document","target","matches","key","i","length","toLocaleLowerCase"],"mappings":"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","file":"main.27be73bc.js","sourceRoot":"..\\src","sourcesContent":["const $siteList = $(\".siteList\");\r\nconst $lastLi = $siteList.find(\"li.last\");\r\nconst x = localStorage.getItem(\"x\"); //获取存储在localStorage里的x\r\nconst xObject = JSON.parse(x); //将字符串转为对象\r\nconst hashMap = xObject || [\r\n  //如果xObject不为null，则hashMap===xObject\r\n  //第一次进入是xObject===null，所以haspMap会等于后面的那个数组对象\r\n  //之后 hashMap===xObject\r\n  //即使页面上的原有的三个logo都删完了，hashMap依旧取值xObject，因为那时xObject=[]，不是falsy值\r\n  { logo: \"G\", url: \"https://github.com\" },\r\n  { logo: \"I\", url: \"https://www.iconfont.cn\" },\r\n  { logo: \"B\", url: \"https://bilibili.com\" },\r\n];\r\nconst simplifyUrl = (url) => {\r\n  return url\r\n    .replace(\"https://\", \"\")\r\n    .replace(\"http://\", \"\")\r\n    .replace(\"www.\", \"\")\r\n    .replace(/\\/.*/, \"\"); //正则表达式，删除/开头的内容\r\n};\r\nconst render = () => {\r\n  $siteList.find(\"li:not(.last)\").remove(); //在添加或删除logo后，清空之前存在的logo，再将新的hashMap加载到HTML中去\r\n  hashMap.forEach((node, index) => {\r\n    const $li = $(`<li>\r\n          <div class=\"site\">\r\n              <div class=\"logo\">${node.logo}</div>\r\n              <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n              <div class=\"close\">\r\n              <svg class=\"icon\">\r\n              <use xlink:href=\"#icon-close\"></use>\r\n          </svg></div>\r\n          </div>\r\n  </li>`).insertBefore($lastLi); //同级别插入\r\n    $li.on(\"click\", () => {\r\n      window.open(node.url);\r\n    });\r\n    $li.on(\"click\", \".close\", (e) => {\r\n      e.stopPropagation();\r\n      hashMap.splice(index, 1);\r\n      render(); //删除logo后重新渲染页面\r\n    });\r\n  });\r\n};\r\n\r\nrender();\r\n\r\n$(\".addButton\").on(\"click\", () => {\r\n  let url = window.prompt(\"请输入要添加的网址\");\r\n  if (url.indexOf(\"https\") !== 0) {\r\n    url = \"https://\" + url;\r\n  }\r\n  hashMap.push({\r\n    //将添加的网址加入hashMap\r\n    logo: simplifyUrl(url)[0].toUpperCase(),\r\n    logoType: \"text\",\r\n    url: url,\r\n  });\r\n  render(); //添加新logo后重新渲染页面\r\n});\r\n\r\nwindow.onbeforeunload = () => {\r\n  const string = JSON.stringify(hashMap); //将数组对象转为字符串\r\n  localStorage.setItem(\"x\", string); //将页面关闭时hashMap的string信息传给x接收\r\n};\r\n\r\n$(document).on(\"keypress\", (e) => {\r\n  while (!e.target.matches(\"input\")) {\r\n    const { key } = e;\r\n    for (let i = 0; i < hashMap.length; i++) {\r\n      if (hashMap[i].logo.toLocaleLowerCase() === key) {\r\n        window.open(hashMap[i].url);\r\n      }\r\n    }\r\n    break;\r\n  }\r\n});\r\n"]}